@model LaPizzaria.ViewModels.ProductIndexViewModel
@{ ViewData["Title"] = "Qu·∫£n l√Ω M√≥n ƒÉn"; }

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary-red">Qu·∫£n l√Ω M√≥n ƒÉn</h2>
        <div class="btn-group">
            <a asp-action="Upsert" class="btn btn-primary-custom">Th√™m M√≥n ƒÉn M·ªõi</a>
            <a asp-action="CreateCombo" class="btn btn-outline-secondary">T·∫°o Combo</a>
        </div>
    </div>

    <!-- Live Search + App-like Categories/Menu -->
    <div class="card shadow-sm mb-3">
        <div class="card-body">
            <div class="row g-3 align-items-center">
                <div class="col-12">
                    <input id="searchBox" type="text" class="form-control rounded-pill px-4" placeholder="T√¨m m√≥n ƒÉn... (g√µ ƒë·ªÉ l·ªçc nhanh)">
                </div>
            </div>
        </div>
    </div>

    <!-- Product Menu with Categories -->
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3 border-end">
                    <div class="list-group" id="catList">
                        <a href="#" class="list-group-item list-group-item-action active" data-cat="All">All</a>
                        <a href="#" class="list-group-item list-group-item-action" data-cat="Pizza">Pizza</a>
                        <a href="#" class="list-group-item list-group-item-action" data-cat="ƒê·ªì u·ªëng">Drinks</a>
                        <a href="#" class="list-group-item list-group-item-action" data-cat="M√≥n ph·ª•">Side Dish</a>
                        <a href="#" class="list-group-item list-group-item-action" data-cat="Combo">Combo</a>
                    </div>
                </div>
                <div class="col-md-9">
                    <div id="menuGrid" class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-3">
                        @{
                            var outIds = Model.OutOfStockIds ?? new List<int>();
                        }
                        @* Render products as cards *@
                        @foreach (var p in Model.Products)
                        {
                            var isOut = outIds.Contains(p.Id);
                            <div class="col" data-cat="@p.Category" data-name="@p.Name">
                                <div class="card h-100 shadow-sm">
                                    <div class="img-wrap">
                                        @if (!string.IsNullOrEmpty(p.ImageUrl)) {
                                            <img src="@p.ImageUrl" alt="@p.Name" />
                                        } else {
                                            <div class="img-wrap img-placeholder">üçï</div>
                                        }
                                    </div>
                                    <div class="card-body">
                                        <h6 class="card-title">@p.Name</h6>
                                        <div class="small text-muted mb-2">@p.Category</div>
                                        <div class="price">@p.Price.ToString("N0") ƒë</div>
                                        @if (isOut)
                                        {
                                            <div class="mt-2"><span class="badge bg-warning text-dark">H·∫øt h√†ng</span></div>
                                        }
                                    </div>
                                    <div class="card-footer bg-transparent border-0 pt-0">
                                        <a asp-action="Upsert" asp-route-id="@p.Id" class="btn btn-sm btn-outline-primary">S·ª≠a</a>
                                        <a asp-action="Ingredients" asp-route-id="@p.Id" class="btn btn-sm btn-outline-secondary">Nguy√™n li·ªáu</a>
                                    </div>
                                </div>
                            </div>
                        }

                        @* Render combos as selectable items in category Combo *@
                        @foreach (var c in Model.Combos)
                        {
                            var fallbackImg = c.Items.FirstOrDefault(i => i.Product != null && !string.IsNullOrEmpty(i.Product.ImageUrl))?.Product?.ImageUrl
                                ?? "https://via.placeholder.com/600x400?text=Combo";
                            var img = !string.IsNullOrEmpty(c.ImageUrl) ? c.ImageUrl : fallbackImg;
                            var raw = c.Items.Where(i=>i.Product!=null).Select(i => i.Product!.Price * i.MinQuantity).DefaultIfEmpty(0m).Sum();
                            var afterAmount = raw - (c.DiscountAmount > 0 ? c.DiscountAmount : 0);
                            var afterPercent = c.DiscountPercent.HasValue ? afterAmount * (1 - (c.DiscountPercent.Value/100m)) : afterAmount;
                            var comboPrice = afterPercent < 0 ? 0 : afterPercent;
                            <div class="col" data-cat="Combo" data-name="@c.Name">
                                <div class="card h-100 shadow-sm">
                                    <div class="img-wrap">
                                        @if (!string.IsNullOrEmpty(img)) {
                                            <img src="@img" alt="@c.Name" />
                                        } else {
                                            <div class="img-wrap img-placeholder">üçï</div>
                                        }
                                    </div>
                                    <div class="card-body">
                                        <h6 class="card-title">@c.Name</h6>
                                        <div class="small text-muted mb-2">Combo</div>
                                        <div class="price">@comboPrice.ToString("N0") ƒë</div>
                                        <div class="small text-muted mt-1">@string.Join(", ", c.Items.Where(i=>i.Product!=null).Select(i => $"{i.Product!.Name} x{i.MinQuantity}"))</div>
                                    </div>
                                    <div class="card-footer bg-transparent border-0 pt-0">
                                        <a asp-action="EditCombo" asp-route-id="@c.Id" class="btn btn-sm btn-outline-primary">S·ª≠a</a>
                                        <form asp-action="DeleteCombo" asp-route-id="@c.Id" method="post" class="d-inline" onsubmit="return confirm('Xo√° combo n√†y?');">
                                            <button type="submit" class="btn btn-sm btn-outline-danger">Xo√°</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .text-primary-red {
        color: var(--primary-red);
        font-weight: bold;
    }
    .btn-primary-custom {
        background-color: var(--primary-red);
        border-color: var(--primary-red);
        color: var(--light-text-color);
        font-weight: bold;
        border-radius: 5px;
        padding: 8px 15px;
        transition: background-color 0.3s ease-in-out, border-color 0.3s ease-in-out;
    }
    .btn-primary-custom:hover {
        background-color: var(--dark-brown);
        border-color: var(--dark-brown);
    }

    .card .price {
        color: var(--primary-red);
        font-weight: 700;
    }

    #catList .list-group-item {
        border: none;
        border-radius: 8px;
        margin-bottom: 6px;
        transition: background-color .2s ease;
    }
    #catList .list-group-item.active,
    #catList .list-group-item:hover {
        background-color: #ffe5e0;
        color: #b71c1c;
        font-weight: 600;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', initMenu);

async function initMenu(){
    const catList = document.getElementById('catList');
    const menuGrid = document.getElementById('menuGrid');
    const searchBox = document.getElementById('searchBox');

    function normalize(s){
        return (s||'').toLowerCase();
    }
    function canonicalCategory(raw){
        const s = normalize(raw);
        if (s.includes('pizza')) return 'Pizza';
        if (s.includes('u·ªëng') || s.includes('drink') || s.includes('beverage')) return 'ƒê·ªì u·ªëng';
        if (s.includes('ph·ª•') || s.includes('side')) return 'M√≥n ph·ª•';
        if (s.includes('combo')) return 'Combo';
        if (s === 'all') return 'All';
        return raw || '';
    }
    function applies(el, cat, term){
        const ec = canonicalCategory(el.getAttribute('data-cat') || '');
        const name = el.getAttribute('data-name') || '';
        const catOk = (canonicalCategory(cat) === 'All') || (ec === canonicalCategory(cat));
        const textOk = normalize(name).includes(normalize(term));
        return catOk && textOk;
    }
    function render(cat){
        const term = searchBox.value || '';
        const cards = Array.from(menuGrid.querySelectorAll('[data-cat]'));
        cards.forEach(el => {
            el.style.display = applies(el, cat, term) ? '' : 'none';
        });
    }
    catList.querySelectorAll('a').forEach(a => {
        a.addEventListener('click', (e)=>{
            e.preventDefault();
            catList.querySelectorAll('a').forEach(x=>x.classList.remove('active'));
            a.classList.add('active');
            render(a.getAttribute('data-cat'));
        });
    });
    searchBox.addEventListener('input', () => {
        const active = catList.querySelector('a.active');
        const cat = active ? active.getAttribute('data-cat') : 'All';
        render(cat);
    });
    render('All');
}
</script>

<style>
    /* Unified menu image sizing - same as QR page */
    .card .img-wrap{position:relative;width:100%;padding-top:100%;background:#f8f9fa;border-bottom:1px solid #eee;border-top-left-radius:.375rem;border-top-right-radius:.375rem;overflow:hidden}
    .card .img-wrap img{position:absolute;top:0;left:0;width:100%;height:100%;object-fit:cover}
    .card .img-wrap.img-placeholder{display:flex;align-items:center;justify-content:center;color:#adb5bd;font-weight:700;font-size:24px}
</style>
